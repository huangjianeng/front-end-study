declare enum SpecStatus {
    PENDING = "pending",
    DISABLED = "disabled",
    SELECTED = "selected"
}
//# sourceMappingURL=enum.d.ts.map

declare class Spec<T> {
    specValue: string;
    specId: string | number;
    specValueId: number | string;
    status: SpecStatus;
    row: number;
    col: number;
    get specJoinQue(): string;
    setStatus(status: SpecStatus): void;
    constructor(spec: T, _row: number, _col: number);
}
declare type SpecInstanceType = InstanceType<typeof Spec>;
//# sourceMappingURL=spec.d.ts.map

declare class SkuPending {
    selectedSpec: (SpecInstanceType | null)[];
    hooks: any[];
    constructor(totalSpecNum: number);
    selectSpec(row: number, spec: SpecInstanceType): void;
    cancelSpec(row: number): void;
    sepcIsSelected(row: number, spec: SpecInstanceType): boolean;
    getSpecsJoinWith(row: number, spec: SpecInstanceType): string;
    combineHook(cb: (...args: any[]) => any): void;
    checkIsGenASku(): boolean;
    getSpecsJoin(): string;
}
declare type SkuPendingInstanceType = InstanceType<typeof SkuPending>;
//# sourceMappingURL=skuPending.d.ts.map

declare class SpecLine<T> {
    specLineTitle: string;
    specs: SpecInstanceType[];
    row: number;
    constructor(_specs: T[], _row: number);
    private _init;
    private _specIsRepeact;
}
declare type SpecLineInstanceType = InstanceType<typeof SpecLine>;
//# sourceMappingURL=specLine.d.ts.map

declare type SpuList<T> = {
    [key: string]: T[] | any;
};
declare class SpecGroup<T, U> {
    private _skuList;
    private _skuSpecsList;
    private _skuIdJoinSpecsId;
    specLines: SpecLineInstanceType[];
    get skuSpecsList(): U[][];
    get skuIdJoinSpecsId(): string[];
    constructor(spu_list: SpuList<T>);
    private _setup;
    private _createSkuSpecsList;
    private _createSkuIdJoinSpecsId;
    private _transposeSkuSpecsList;
    private _createSpecLines;
    eachSpec(cb: (spec: SpecInstanceType, row: number, col: number) => any): void;
    getSpec(row: number, col: number): SpecInstanceType;
    setSpecStatusByPosition(row: number, col: number, status: SpecStatus): void;
    eachSkuIdJoinSpecsId(cb: (skuSpecsJoin: string) => any): void;
}
declare type SpecGroupInstanceType = InstanceType<typeof SpecGroup>;
//# sourceMappingURL=specGroup.d.ts.map

declare class Judger {
    specGroup: SpecGroupInstanceType;
    pathDict: string[];
    skuPending: SkuPendingInstanceType;
    constructor(sg: SpecGroupInstanceType);
    private _initPathDict;
    private _initSkuPending;
    specTap(spec: SpecInstanceType): void;
    onSkuCombined(cb: (...args: any[]) => any): void;
    private _changeSpecStatus;
    private _checkOtherSpecStatus;
    private _isInPathDict;
    private _disableSpec;
}
declare type JudgerInstanceType = InstanceType<typeof Judger>;
//# sourceMappingURL=judger.d.ts.map

interface SpuOps {
    skuCodeJoiner: string;
    specCodeJoiner: string;
    getSkuList(spu: any): any[];
    getSkuSpecList(sku: any): any[];
    getSkuId(sku: any): number | string;
    getSpecId(spec: any): number | string;
    getspecValueId(spec: any): number | string;
    getSpecTitle(spec: any): string;
    getspecValue(spec: any): string;
    [key: string]: unknown;
}//# sourceMappingURL=spuOps.d.ts.map

declare function createSkuSelector<T>(spuList: SpuList<T>, _spuOps?: Partial<SpuOps>): JudgerInstanceType;//# sourceMappingURL=index.d.ts.map

export { SpecInstanceType, SpecLineInstanceType, SpuOps, createSkuSelector };
